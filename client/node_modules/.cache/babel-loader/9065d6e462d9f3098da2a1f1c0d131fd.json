{"ast":null,"code":"import { connect } from 'react-redux';\nimport * as actions from \"../actions\";\nimport { bindActionCreators } from 'redux';\nimport TodoList from '../components/TodoList';\n\nvar getVisibleTodos = function getVisibleTodos(todos, filter) {\n  switch (filter) {\n    case actions.VisibilityFilters.SHOW_ALL:\n      return todos;\n\n    case actions.VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(function (todo) {\n        return todo.isDone;\n      });\n\n    case actions.VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(function (todo) {\n        return !todo.isDone;\n      });\n\n    default:\n      throw new Error(\"Unknown filter : \" + filter);\n  }\n}; //this component will subscribe to Redux store updates. \n//when the store is updated,  mapStateToProps will be called.\n// mapStateToProps returns a plain object, which will be merged into the component’s props.\n// state is the global state (state = store.getState())\n// state.todo, key \"todo\" is set by reducers/index.js\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    todos: getVisibleTodos(state.todo, state.visibilityfilter)\n  };\n}; // https://gist.github.com/markerikson/6c7608eee5d2421966d3df5edbb8f05c\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return (// bindActionCreator return function, which makes the action creator be able to be invoked directly\n    bindActionCreators({\n      toggle: actions.toggle,\n      remove: actions.remove\n    }, dispatch) // alternatively, check Header mapDispatchToProps\n\n  );\n}; // https://github.com/reduxjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\n// use connect() so this.props has access to action toggle\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","map":{"version":3,"sources":["/Users/guane/Work/study/todoApp/src/container/VisibilityTodoList.js"],"names":["connect","actions","bindActionCreators","TodoList","getVisibleTodos","todos","filter","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","todo","isDone","SHOW_ACTIVE","Error","mapStateToProps","state","visibilityfilter","mapDispatchToProps","dispatch","toggle","remove"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACvC,UAAOA,MAAP;AACI,SAAKL,OAAO,CAACM,iBAAR,CAA0BC,QAA/B;AACI,aAAOH,KAAP;;AACJ,SAAKJ,OAAO,CAACM,iBAAR,CAA0BE,cAA/B;AACI,aAAOJ,KAAK,CAACC,MAAN,CAAc,UAAAI,IAAI;AAAA,eAAIA,IAAI,CAACC,MAAT;AAAA,OAAlB,CAAP;;AACJ,SAAKV,OAAO,CAACM,iBAAR,CAA0BK,WAA/B;AACI,aAAOP,KAAK,CAACC,MAAN,CAAc,UAAAI,IAAI;AAAA,eAAI,CAACA,IAAI,CAACC,MAAV;AAAA,OAAlB,CAAP;;AACJ;AACI,YAAM,IAAIE,KAAJ,CAAU,sBAAsBP,MAAhC,CAAN;AARR;AAUH,CAXD,C,CAaA;AACA;AACA;AACA;AACA;;;AACA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SACzB;AAAEV,IAAAA,KAAK,EAAED,eAAe,CAACW,KAAK,CAACL,IAAP,EAAaK,KAAK,CAACC,gBAAnB;AAAxB,GADyB;AAAA,CAA7B,C,CAIA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAC/B;AACAhB,IAAAA,kBAAkB,CAAC;AAACiB,MAAAA,MAAM,EAAElB,OAAO,CAACkB,MAAjB;AAAyBC,MAAAA,MAAM,EAAEnB,OAAO,CAACmB;AAAzC,KAAD,EAAmDF,QAAnD,CAFa,CAG/B;;AAH+B;AAAA,CAAnC,C,CAMA;AACA;;;AACA,eAAelB,OAAO,CAACc,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cd,QAA7C,CAAf","sourcesContent":["import {connect} from 'react-redux';\nimport * as actions from \"../actions\";\nimport {bindActionCreators} from 'redux';\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = (todos, filter) => {\n    switch(filter){\n        case actions.VisibilityFilters.SHOW_ALL:\n            return todos;\n        case actions.VisibilityFilters.SHOW_COMPLETED :\n            return todos.filter( todo => todo.isDone);\n        case actions.VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter( todo => !todo.isDone);\n        default:\n            throw new Error(\"Unknown filter : \" + filter);\n    }\n}\n\n//this component will subscribe to Redux store updates. \n//when the store is updated,  mapStateToProps will be called.\n// mapStateToProps returns a plain object, which will be merged into the component’s props.\n// state is the global state (state = store.getState())\n// state.todo, key \"todo\" is set by reducers/index.js\nconst mapStateToProps = state => (\n    { todos: getVisibleTodos(state.todo, state.visibilityfilter) }\n);\n\n// https://gist.github.com/markerikson/6c7608eee5d2421966d3df5edbb8f05c\nconst mapDispatchToProps = dispatch => (\n    // bindActionCreator return function, which makes the action creator be able to be invoked directly\n    bindActionCreators({toggle: actions.toggle, remove: actions.remove}, dispatch)\n    // alternatively, check Header mapDispatchToProps\n);\n\n// https://github.com/reduxjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\n// use connect() so this.props has access to action toggle\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);"]},"metadata":{},"sourceType":"module"}